From 8a1151e8c5c718defc5aa8959436c5bd73160c9c Mon Sep 17 00:00:00 2001
From: julianajlk <jkang@edx.org>
Date: Fri, 2 Jul 2021 10:11:41 -0400
Subject: [PATCH 0518/1021] feat: add Value Prop upgrade notification to
 Courseware  (#511)

Part 2 of REV-2130
---
 src/course-home/outline-tab/OutlineTab.jsx    |  1 +
 src/courseware/course/Course.jsx              |  4 +-
 src/courseware/course/Course.test.jsx         |  2 +-
 src/courseware/course/Sidebar.jsx             | 43 ++++++++--
 src/courseware/course/Sidebar.scss            |  4 +-
 src/courseware/course/Sidebar.test.jsx        | 65 ++++++++++-----
 .../course/SidebarNotificationButton.jsx      |  4 +-
 .../course/SidebarNotificationButton.test.jsx |  4 +-
 src/courseware/course/sequence/Sequence.jsx   |  2 +-
 .../course/sequence/Sequence.test.jsx         |  1 +
 src/courseware/data/api.js                    | 81 ++++++++++---------
 src/generic/upgrade-button/UpgradeButton.jsx  |  2 +
 src/generic/upgrade-card/UpgradeCard.jsx      |  6 +-
 src/generic/upgrade-card/UpgradeCard.scss     |  4 +-
 14 files changed, 146 insertions(+), 77 deletions(-)

diff --git a/src/course-home/outline-tab/OutlineTab.jsx b/src/course-home/outline-tab/OutlineTab.jsx
index d2a9431..5a27c4c 100644
--- a/src/course-home/outline-tab/OutlineTab.jsx
+++ b/src/course-home/outline-tab/OutlineTab.jsx
@@ -228,6 +228,7 @@ function OutlineTab({ intl }) {
                   timeOffsetMillis={timeOffsetMillis}
                   courseId={courseId}
                   org={org}
+                  shouldDisplayBorder
                 />
               )}
             <CourseDates
diff --git a/src/courseware/course/Course.jsx b/src/courseware/course/Course.jsx
index 6c2b5f2..b43c8c7 100644
--- a/src/courseware/course/Course.jsx
+++ b/src/courseware/course/Course.jsx
@@ -61,14 +61,14 @@ function Course({
     courseId, sequenceId, unitId, celebrateFirstSection, dispatch, celebrations,
   );
 
-  // REV-2130 TODO: temporary cookie code that should be removed.
+  // REV-2297 TODO: temporary cookie code that should be removed.
   // In order to see the Value Prop sidebar in prod, a cookie should be set in
   // the browser console and refresh: document.cookie = 'value_prop_cookie=true';
   const isValuePropCookieSet = Cookies.get('value_prop_cookie') === 'true';
 
   const shouldDisplaySidebarButton = useWindowSize().width >= responsiveBreakpoints.small.minWidth;
 
-  const [sidebarVisible, setSidebar] = useState(false);
+  const [sidebarVisible, setSidebar] = useState(true);
   const isSidebarVisible = () => sidebarVisible && setSidebar;
   const toggleSidebar = () => {
     if (sidebarVisible) { setSidebar(false); } else { setSidebar(true); }
diff --git a/src/courseware/course/Course.test.jsx b/src/courseware/course/Course.test.jsx
index efca929..418a633 100644
--- a/src/courseware/course/Course.test.jsx
+++ b/src/courseware/course/Course.test.jsx
@@ -91,7 +91,7 @@ describe('Course', () => {
     const toggleSidebar = jest.fn();
     const isSidebarVisible = jest.fn();
 
-    // REV-2130 TODO: remove cookie related code once temporary value prop cookie code is removed.
+    // REV-2297 TODO: remove cookie related code once temporary value prop cookie code is removed.
     const cookieName = 'value_prop_cookie';
     Cookies.set = jest.fn();
     Cookies.get = jest.fn().mockImplementation(() => cookieName);
diff --git a/src/courseware/course/Sidebar.jsx b/src/courseware/course/Sidebar.jsx
index f2f4571..4721e9d 100644
--- a/src/courseware/course/Sidebar.jsx
+++ b/src/courseware/course/Sidebar.jsx
@@ -1,23 +1,39 @@
 import React from 'react';
+import { useSelector } from 'react-redux';
 import PropTypes from 'prop-types';
 import classNames from 'classnames';
 import { injectIntl, intlShape } from '@edx/frontend-platform/i18n';
 import { Icon } from '@edx/paragon';
 import { ArrowBackIos, Close } from '@edx/paragon/icons';
+
 import messages from './messages';
+import { useModel } from '../../generic/model-store';
 import useWindowSize, { responsiveBreakpoints } from '../../generic/tabs/useWindowSize';
+import UpgradeCard from '../../generic/upgrade-card/UpgradeCard';
 
 function Sidebar({
   intl, toggleSidebar,
 }) {
-  const shouldDisplayFullScreen = useWindowSize().width < responsiveBreakpoints.large.minWidth;
+  const {
+    courseId,
+  } = useSelector(state => state.courseware);
+
+  const course = useModel('coursewareMeta', courseId);
 
-  // REV-2130 TODO: temporary variable set to true, should be replaced with
-  // whether the course can be upgraded (ie. shouldDisplayUpgradeNotification)
-  const shouldDisplayNoNotification = true;
+  const {
+    accessExpiration,
+    contentTypeGatingEnabled,
+    offer,
+    org,
+    timeOffsetMillis,
+    userTimezone,
+    verifiedMode,
+  } = course;
+
+  const shouldDisplayFullScreen = useWindowSize().width < responsiveBreakpoints.large.minWidth;
 
   return (
-    <section className={classNames('sidebar-container ml-0 ml-lg-4', { 'no-notification': shouldDisplayNoNotification && !shouldDisplayFullScreen })} aria-label={intl.formatMessage(messages.sidebarNotification)}>
+    <section className={classNames('sidebar-container ml-0 ml-lg-4', { 'no-notification': !verifiedMode && !shouldDisplayFullScreen })} aria-label={intl.formatMessage(messages.sidebarNotification)}>
       {shouldDisplayFullScreen ? (
         <div className="mobile-close-container" onClick={() => { toggleSidebar(); }} onKeyDown={() => { toggleSidebar(); }} role="button" tabIndex="0" alt={intl.formatMessage(messages.responsiveCloseSidebar)}>
           <Icon src={ArrowBackIos} />
@@ -31,9 +47,20 @@ function Sidebar({
           : <Icon src={Close} className="close-btn" onClick={() => { toggleSidebar(); }} onKeyDown={() => { toggleSidebar(); }} role="button" tabIndex="0" alt={intl.formatMessage(messages.closeSidebarButton)} />}
       </div>
       <div className="sidebar-divider" />
-      <div className="sidebar-content">
-        {/* REV-2130 TODO: replace logic to display upgrade expiration box if condition is true */}
-        {shouldDisplayNoNotification ? <p>{intl.formatMessage(messages.noNotificationsMessage)}</p> : null}
+      <div>{verifiedMode
+        ? (
+          <UpgradeCard
+            offer={offer}
+            verifiedMode={verifiedMode}
+            accessExpiration={accessExpiration}
+            contentTypeGatingEnabled={contentTypeGatingEnabled}
+            userTimezone={userTimezone}
+            timeOffsetMillis={timeOffsetMillis}
+            courseId={courseId}
+            org={org}
+            shouldDisplayBorder={false}
+          />
+        ) : <p className="sidebar-content">{intl.formatMessage(messages.noNotificationsMessage)}</p>}
       </div>
     </section>
   );
diff --git a/src/courseware/course/Sidebar.scss b/src/courseware/course/Sidebar.scss
index c7ee65f..2417e32 100644
--- a/src/courseware/course/Sidebar.scss
+++ b/src/courseware/course/Sidebar.scss
@@ -1,8 +1,9 @@
 .sidebar-container {
     border: 1px solid $light-400;
     border-radius: 4px;
-    width: 20rem;
+    width: 31rem;
     vertical-align: top;
+    height: 100%;
 
     @media (max-width: -1 + map-get($grid-breakpoints, 'lg')) {
         position: fixed; 
@@ -11,7 +12,6 @@
         left: 0; 
         right: 0;
         width: 100%;
-        height: 100% !important;
         background-color: white;
         margin: 0;
         border: none;
diff --git a/src/courseware/course/Sidebar.test.jsx b/src/courseware/course/Sidebar.test.jsx
index 2fda5c0..fdb4473 100644
--- a/src/courseware/course/Sidebar.test.jsx
+++ b/src/courseware/course/Sidebar.test.jsx
@@ -1,43 +1,72 @@
 import React from 'react';
 import { Factory } from 'rosie';
+import MockAdapter from 'axios-mock-adapter';
+import { getConfig } from '@edx/frontend-platform';
+import { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';
+
+import { fetchCourse } from '../data';
 import {
-  render, initializeTestStore, screen, fireEvent, waitFor,
+  render, initializeMockApp, screen, fireEvent, waitFor,
 } from '../../setupTest';
+import initializeStore from '../../store';
+import { appendBrowserTimezoneToUrl, executeThunk } from '../../utils';
 import Sidebar from './Sidebar';
 import useWindowSize from '../../generic/tabs/useWindowSize';
 
+initializeMockApp();
 jest.mock('../../generic/tabs/useWindowSize');
+jest.mock('@edx/frontend-platform/analytics');
 
 describe('Sidebar', () => {
   let mockData;
-  const courseMetadata = Factory.build('courseMetadata');
+  let axiosMock;
+  let store;
+
+  const courseId = 'course-v1:edX+DemoX+Demo_Course';
+
+  const defaultMetadata = Factory.build('courseMetadata', { id: courseId });
+  let courseMetadataUrl = `${getConfig().LMS_BASE_URL}/api/courseware/course/${defaultMetadata.id}`;
+  courseMetadataUrl = appendBrowserTimezoneToUrl(courseMetadataUrl);
+
+  function setMetadata(attributes, options) {
+    const courseMetadata = Factory.build('courseMetadata', { id: courseId, ...attributes }, options);
+    axiosMock.onGet(courseMetadataUrl).reply(200, courseMetadata);
+  }
+
+  async function fetchAndRender(component) {
+    await executeThunk(fetchCourse(defaultMetadata.id), store.dispatch);
+    render(component, { store });
+  }
 
   beforeEach(async () => {
+    store = initializeStore();
+    axiosMock = new MockAdapter(getAuthenticatedHttpClient());
+    axiosMock.onGet(courseMetadataUrl).reply(200, defaultMetadata);
     mockData = {
       toggleSidebar: () => {},
     };
   });
 
-  beforeAll(async () => {
-    await initializeTestStore({ courseMetadata, excludeFetchCourse: true, excludeFetchSequence: true });
-  });
-
   it('renders sidebar', async () => {
     useWindowSize.mockReturnValue({ width: 1200, height: 422 });
-    const { container } = render(<Sidebar {...mockData} />);
-
-    expect(container).toBeInTheDocument();
-    expect(container).toHaveTextContent('Notifications');
-    expect(container).not.toHaveTextContent('Back to course');
+    await fetchAndRender(<Sidebar />);
+    expect(screen.getByText('Notifications')).toBeInTheDocument();
+    expect(screen.queryByText('Back to course')).not.toBeInTheDocument();
   });
 
-  it('renders no notifications message', async () => {
-    // REV-2130 TODO: add conditional if no expiration box/upgradeable
-    const testData = { ...mockData };
-    const { container } = render(<Sidebar {...testData} />);
+  it('renders upgrade card', async () => {
+    await fetchAndRender(<Sidebar />);
+    const upgradeCard = document.querySelector('.upgrade-card');
+
+    expect(upgradeCard).toBeInTheDocument();
+    expect(screen.getByRole('link', { name: 'Upgrade for $149' })).toBeInTheDocument();
+    expect(screen.queryByText('You have no new notifications at this time.')).not.toBeInTheDocument();
+  });
 
-    expect(container).toBeInTheDocument();
-    expect(container).toHaveTextContent('You have no new notifications at this time.');
+  it('renders no notifications message if no verified mode', async () => {
+    setMetadata({ verified_mode: null });
+    await fetchAndRender(<Sidebar />);
+    expect(screen.queryByText('You have no new notifications at this time.')).toBeInTheDocument();
   });
 
   it('renders sidebar with full screen "Back to course" at response width', async () => {
@@ -47,7 +76,7 @@ describe('Sidebar', () => {
       ...mockData,
       toggleSidebar,
     };
-    render(<Sidebar {...testData} />);
+    await fetchAndRender(<Sidebar {...testData} />);
 
     const responsiveCloseButton = screen.getByRole('button', { name: 'Back to course' });
     await waitFor(() => expect(responsiveCloseButton).toBeInTheDocument());
diff --git a/src/courseware/course/SidebarNotificationButton.jsx b/src/courseware/course/SidebarNotificationButton.jsx
index 9f35eea..4ff7ccc 100644
--- a/src/courseware/course/SidebarNotificationButton.jsx
+++ b/src/courseware/course/SidebarNotificationButton.jsx
@@ -14,8 +14,8 @@ function SidebarNotificationButton({ intl, toggleSidebar, isSidebarVisible }) {
       onClick={() => { toggleSidebar(); }}
       aria-label={intl.formatMessage(messages.openSidebarButton)}
     >
-      {/* REV-2130 TODO: add logic for status "active" if red dot should display */}
-      <NotificationIcon status="active" notificationColor="bg-danger-500" />
+      {/* REV-2297 TODO: add logic for status "active" if red dot should display */}
+      <NotificationIcon status="inactive" notificationColor="bg-danger-500" />
     </button>
   );
 }
diff --git a/src/courseware/course/SidebarNotificationButton.test.jsx b/src/courseware/course/SidebarNotificationButton.test.jsx
index abaffe0..f311750 100644
--- a/src/courseware/course/SidebarNotificationButton.test.jsx
+++ b/src/courseware/course/SidebarNotificationButton.test.jsx
@@ -23,8 +23,8 @@ describe('Sidebar Notification Button', () => {
     const buttonIcon = container.querySelectorAll('svg');
     expect(buttonIcon).toHaveLength(1);
 
-    // REV-2130 TODO: update below test once the status=active or inactive is implemented
-    expect(screen.getByTestId('notification-dot')).toBeInTheDocument();
+    // REV-2297 TODO: update below test once the status=active or inactive is implemented
+    // expect(screen.getByTestId('notification-dot')).toBeInTheDocument();
   });
 
   it('handles onClick event toggling the sidebar', async () => {
diff --git a/src/courseware/course/sequence/Sequence.jsx b/src/courseware/course/sequence/Sequence.jsx
index 0078cfb..5b7d3de 100644
--- a/src/courseware/course/sequence/Sequence.jsx
+++ b/src/courseware/course/sequence/Sequence.jsx
@@ -226,7 +226,7 @@ function Sequence({
           )}
         </div>
       </div>
-      {sidebarVisible ? (
+      {isValuePropCookieSet && sidebarVisible ? (
         <Sidebar
           toggleSidebar={toggleSidebar}
           sidebarVisible={sidebarVisible}
diff --git a/src/courseware/course/sequence/Sequence.test.jsx b/src/courseware/course/sequence/Sequence.test.jsx
index 7ba6363..f602cec 100644
--- a/src/courseware/course/sequence/Sequence.test.jsx
+++ b/src/courseware/course/sequence/Sequence.test.jsx
@@ -134,6 +134,7 @@ describe('Sequence', () => {
     const testData = {
       ...mockData,
       sidebarVisible: true,
+      isValuePropCookieSet: true,
     };
 
     render(<Sequence {...testData} />);
diff --git a/src/courseware/data/api.js b/src/courseware/data/api.js
index 369e81c..495d3cd 100644
--- a/src/courseware/data/api.js
+++ b/src/courseware/data/api.js
@@ -1,6 +1,7 @@
 import { getConfig, camelCaseObject } from '@edx/frontend-platform';
 import { getAuthenticatedHttpClient, getAuthenticatedUser } from '@edx/frontend-platform/auth';
 import { logInfo } from '@edx/frontend-platform/logging';
+import { getTimeOffsetMillis } from '../../course-home/data/api';
 import { appendBrowserTimezoneToUrl } from '../../utils';
 
 export function normalizeBlocks(courseId, blocks) {
@@ -141,51 +142,55 @@ function normalizeTabUrls(id, tabs) {
 }
 
 function normalizeMetadata(metadata) {
+  const requestTime = Date.now();
+  const responseTime = requestTime;
+  const { data, headers } = metadata;
   return {
-    accessExpiration: camelCaseObject(metadata.access_expiration),
-    canShowUpgradeSock: metadata.can_show_upgrade_sock,
-    contentTypeGatingEnabled: metadata.content_type_gating_enabled,
-    id: metadata.id,
-    title: metadata.name,
-    number: metadata.number,
-    offer: camelCaseObject(metadata.offer),
-    org: metadata.org,
-    enrollmentStart: metadata.enrollment_start,
-    enrollmentEnd: metadata.enrollment_end,
-    end: metadata.end,
-    start: metadata.start,
-    enrollmentMode: metadata.enrollment.mode,
-    isEnrolled: metadata.enrollment.is_active,
-    canLoadCourseware: camelCaseObject(metadata.can_load_courseware),
-    canViewLegacyCourseware: metadata.can_view_legacy_courseware,
-    originalUserIsStaff: metadata.original_user_is_staff,
-    isStaff: metadata.is_staff,
-    license: metadata.license,
-    verifiedMode: camelCaseObject(metadata.verified_mode),
-    tabs: normalizeTabUrls(metadata.id, camelCaseObject(metadata.tabs)),
-    userTimezone: metadata.user_timezone,
-    showCalculator: metadata.show_calculator,
-    notes: camelCaseObject(metadata.notes),
-    marketingUrl: metadata.marketing_url,
-    celebrations: camelCaseObject(metadata.celebrations),
-    userHasPassingGrade: metadata.user_has_passing_grade,
-    courseExitPageIsActive: metadata.course_exit_page_is_active,
-    certificateData: camelCaseObject(metadata.certificate_data),
-    verifyIdentityUrl: metadata.verify_identity_url,
-    verificationStatus: metadata.verification_status,
-    linkedinAddToProfileUrl: metadata.linkedin_add_to_profile_url,
-    relatedPrograms: camelCaseObject(metadata.related_programs),
-    userNeedsIntegritySignature: metadata.user_needs_integrity_signature,
-    specialExamsEnabledWaffleFlag: metadata.is_mfe_special_exams_enabled,
-    proctoredExamsEnabledWaffleFlag: metadata.is_mfe_proctored_exams_enabled,
+    accessExpiration: camelCaseObject(data.access_expiration),
+    canShowUpgradeSock: data.can_show_upgrade_sock,
+    contentTypeGatingEnabled: data.content_type_gating_enabled,
+    id: data.id,
+    title: data.name,
+    number: data.number,
+    offer: camelCaseObject(data.offer),
+    org: data.org,
+    enrollmentStart: data.enrollment_start,
+    enrollmentEnd: data.enrollment_end,
+    end: data.end,
+    start: data.start,
+    enrollmentMode: data.enrollment.mode,
+    isEnrolled: data.enrollment.is_active,
+    canLoadCourseware: camelCaseObject(data.can_load_courseware),
+    canViewLegacyCourseware: data.can_view_legacy_courseware,
+    originalUserIsStaff: data.original_user_is_staff,
+    isStaff: data.is_staff,
+    license: data.license,
+    verifiedMode: camelCaseObject(data.verified_mode),
+    tabs: normalizeTabUrls(data.id, camelCaseObject(data.tabs)),
+    userTimezone: data.user_timezone,
+    showCalculator: data.show_calculator,
+    notes: camelCaseObject(data.notes),
+    marketingUrl: data.marketing_url,
+    celebrations: camelCaseObject(data.celebrations),
+    userHasPassingGrade: data.user_has_passing_grade,
+    courseExitPageIsActive: data.course_exit_page_is_active,
+    certificateData: camelCaseObject(data.certificate_data),
+    timeOffsetMillis: getTimeOffsetMillis(headers && headers.date, requestTime, responseTime),
+    verifyIdentityUrl: data.verify_identity_url,
+    verificationStatus: data.verification_status,
+    linkedinAddToProfileUrl: data.linkedin_add_to_profile_url,
+    relatedPrograms: camelCaseObject(data.related_programs),
+    userNeedsIntegritySignature: data.user_needs_integrity_signature,
+    specialExamsEnabledWaffleFlag: data.is_mfe_special_exams_enabled,
+    proctoredExamsEnabledWaffleFlag: data.is_mfe_proctored_exams_enabled,
   };
 }
 
 export async function getCourseMetadata(courseId) {
   let url = `${getConfig().LMS_BASE_URL}/api/courseware/course/${courseId}`;
   url = appendBrowserTimezoneToUrl(url);
-  const { data } = await getAuthenticatedHttpClient().get(url);
-  return normalizeMetadata(data);
+  const metadata = await getAuthenticatedHttpClient().get(url);
+  return normalizeMetadata(metadata);
 }
 
 function normalizeSequenceMetadata(sequence) {
diff --git a/src/generic/upgrade-button/UpgradeButton.jsx b/src/generic/upgrade-button/UpgradeButton.jsx
index 6be38d5..8e9bd31 100644
--- a/src/generic/upgrade-button/UpgradeButton.jsx
+++ b/src/generic/upgrade-button/UpgradeButton.jsx
@@ -24,6 +24,8 @@ function UpgradeButton(props) {
       href={url}
       onClick={onClick}
       {...rest}
+      size="lg"
+      block
     >
       <FormattedMessage
         id="learning.upgradeButton.buttonText"
diff --git a/src/generic/upgrade-card/UpgradeCard.jsx b/src/generic/upgrade-card/UpgradeCard.jsx
index 3c23974..5fe848f 100644
--- a/src/generic/upgrade-card/UpgradeCard.jsx
+++ b/src/generic/upgrade-card/UpgradeCard.jsx
@@ -1,5 +1,6 @@
 import React, { useEffect } from 'react';
 import PropTypes from 'prop-types';
+import classNames from 'classnames';
 import { faCheck } from '@fortawesome/free-solid-svg-icons';
 import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
 
@@ -267,6 +268,7 @@ function UpgradeCard({
   timeOffsetMillis,
   userTimezone,
   verifiedMode,
+  shouldDisplayBorder,
 }) {
   const timezoneFormatArgs = userTimezone ? { timeZone: userTimezone } : {};
   const correctedTime = new Date(Date.now() + timeOffsetMillis);
@@ -393,7 +395,7 @@ function UpgradeCard({
   }
 
   return (
-    <section className="mb-4 card upgrade-card small">
+    <section className={classNames('upgrade-card small', { 'card mb-4': shouldDisplayBorder })}>
       <h2 className="h5 upgrade-card-header" id="outline-sidebar-upgrade-header">
         {upgradeCardHeaderText}
       </h2>
@@ -431,6 +433,7 @@ UpgradeCard.propTypes = {
     price: PropTypes.number.isRequired,
     upgradeUrl: PropTypes.string.isRequired,
   }),
+  shouldDisplayBorder: PropTypes.bool,
 };
 
 UpgradeCard.defaultProps = {
@@ -440,6 +443,7 @@ UpgradeCard.defaultProps = {
   timeOffsetMillis: 0,
   userTimezone: null,
   verifiedMode: null,
+  shouldDisplayBorder: null,
 };
 
 export default injectIntl(UpgradeCard);
diff --git a/src/generic/upgrade-card/UpgradeCard.scss b/src/generic/upgrade-card/UpgradeCard.scss
index a4b7b34..4ced0ce 100644
--- a/src/generic/upgrade-card/UpgradeCard.scss
+++ b/src/generic/upgrade-card/UpgradeCard.scss
@@ -34,8 +34,8 @@
 }
 
 .upgrade-card-button {
-  margin-left: 1.25rem;
-  margin-right: 1.25rem;
+  width: 90%;
+  margin: 0 auto;
   margin-bottom: 1.25rem;
 }
 
-- 
2.34.1

