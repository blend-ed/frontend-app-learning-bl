From 7df95378d64e8ac517a5f8f67d23a54b5d05f312 Mon Sep 17 00:00:00 2001
From: stvn <stvn@mit.edu>
Date: Thu, 30 Apr 2020 15:04:54 -0700
Subject: [PATCH 0114/1021] Refactor iframe message handler

TNL-7187
---
 src/courseware/course/sequence/Unit.jsx | 40 +++++++++++++++----------
 1 file changed, 24 insertions(+), 16 deletions(-)

diff --git a/src/courseware/course/sequence/Unit.jsx b/src/courseware/course/sequence/Unit.jsx
index ce8e762..dbe8780 100644
--- a/src/courseware/course/sequence/Unit.jsx
+++ b/src/courseware/course/sequence/Unit.jsx
@@ -1,6 +1,7 @@
 import React, {
   Suspense,
   useEffect,
+  useRef,
   useState,
   useLayoutEffect,
 } from 'react';
@@ -67,26 +68,33 @@ function Unit({
   // Do not remove this hook.  See function description.
   useLoadBearingHook(id);
 
+  // We use this ref so that we can hold a reference to the currently active event listener.
+  const messageEventListenerRef = useRef(null);
   useEffect(() => {
-    if (!global.onmessage) {
-      global.onmessage = (event) => {
-        const { type, payload } = event.data;
-
-        if (type === 'plugin.resize') {
-          setIframeHeight(payload.height);
-          if (!hasLoaded && iframeHeight === 0 && payload.height > 0) {
-            setHasLoaded(true);
-            if (onLoaded) {
-              onLoaded();
-            }
+    function receiveMessage(event) {
+      const { type, payload } = event.data;
+      if (type === 'plugin.resize') {
+        setIframeHeight(payload.height);
+        if (!hasLoaded && iframeHeight === 0 && payload.height > 0) {
+          setHasLoaded(true);
+          if (onLoaded) {
+            onLoaded();
           }
         }
-      };
+      }
     }
-    return () => {
-      global.onmessage = null;
-    };
-  }, [id]);
+    // If we currently have an event listener, remove it.
+    if (messageEventListenerRef.current !== null) {
+      global.removeEventListener('message', messageEventListenerRef.current);
+      messageEventListenerRef.current = null;
+    }
+    // Now add our new receiveMessage handler as the event listener.
+    global.addEventListener('message', receiveMessage);
+    // And then save it to our ref for next time.
+    messageEventListenerRef.current = receiveMessage;
+    // When the component finally unmounts, use the ref to remove the correct handler.
+    return () => global.removeEventListener('message', messageEventListenerRef.current);
+  }, [id, setIframeHeight, hasLoaded, iframeHeight, setHasLoaded, onLoaded]);
 
   return (
     <div className="unit">
-- 
2.34.1

