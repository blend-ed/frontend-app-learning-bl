From 7df50264cf2dfdb659e93e504890a7e3849d657a Mon Sep 17 00:00:00 2001
From: David Joy <davidjoy@users.noreply.github.com>
Date: Thu, 2 Jul 2020 13:24:25 -0400
Subject: [PATCH 0156/1021] Update 0004-model-store.md (#101)

Explaining the rationale for model-store in a bit more detail.
---
 docs/decisions/0004-model-store.md | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/docs/decisions/0004-model-store.md b/docs/decisions/0004-model-store.md
index 61a3d4b..9a58011 100644
--- a/docs/decisions/0004-model-store.md
+++ b/docs/decisions/0004-model-store.md
@@ -4,4 +4,6 @@ Because we have a variety of models in this app (course, section, sequence, unit
 
 https://redux.js.org/faq/organizing-state#how-do-i-organize-nested-or-duplicate-data-in-my-state
 
-(As an additional data point, djoy has stored data in this format in multiple projects over the years and found it to be very effective)
+Different modules of the application maintain individual/lists of IDs that reference data stored in the model store.  These are akin to indices in a database, in that they allow you to quickly extract data from the model store without iteration or filtering.  
+
+A common pattern when loading data from an API endpoint is to use the model-store's redux actions (addModel, updateModel, etc.) to load the "models" themselves into the model store by ID, and then dispatch another action to save references elsewhere in the redux store to the data that was just added.  When adding courses, sequences, etc., to model-store, we also save the courseId and sequenceId in the 'courseware' part of redux.  This means the courseware React Components can extract the data from the model-store quickly by using the courseId as a key: `state.models.courses[state.courseware.courseId]`.  For an array, it iterates once over the ID list in order to extract the models from model-store.  This iteration is done when React components' re-render, and can be done less often through memoization as necessary.
-- 
2.34.1

